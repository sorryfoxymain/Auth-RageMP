console.log('Login UI script loaded');

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const VALIDATION_PATTERNS = {
    username: /^[A-Za-z]+$/,
    password: /^(?=.*[A-Z]).{6,}$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    phone: /^\+\d{10,15}$/
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
function togglePassword(inputId) {
    const input = document.getElementById(inputId);
    const button = input.parentElement.querySelector('.toggle-password');
    
    if (input.type === 'password') {
        input.type = 'text';
        button.textContent = 'üôà';
    } else {
        input.type = 'password';
        button.textContent = 'üëÅ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –≤ –ø–æ–ª–µ
function showFieldError(fieldId, message) {
    const errorElement = document.getElementById(fieldId + '-error');
    const inputElement = document.getElementById(fieldId);
    
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.className = 'error-field';
    }
    if (inputElement) {
        inputElement.classList.remove('valid');
        inputElement.classList.add('error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—Ö–∞ –≤ –ø–æ–ª–µ
function showFieldSuccess(fieldId, message = '') {
    const errorElement = document.getElementById(fieldId + '-error');
    const inputElement = document.getElementById(fieldId);
    
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.className = 'success-field';
    }
    if (inputElement) {
        inputElement.classList.remove('error');
        inputElement.classList.add('valid');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–ª—è
function clearFieldError(fieldId) {
    const errorElement = document.getElementById(fieldId + '-error');
    const inputElement = document.getElementById(fieldId);
    
    if (errorElement) {
        errorElement.textContent = '';
    }
    if (inputElement) {
        inputElement.classList.remove('error', 'valid');
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function validateUsername(username) {
    if (!username) {
        return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
    }
    if (username.length < 3 || username.length > 20) {
        return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    if (!VALIDATION_PATTERNS.username.test(username)) {
        return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã';
    }
    return null;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
function validatePassword(password) {
    if (!password) {
        return '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
    }
    if (!VALIDATION_PATTERNS.password.test(password)) {
        return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É';
    }
    return null;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function validateEmail(email) {
    if (!email) {
        return 'Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
    }
    if (!VALIDATION_PATTERNS.email.test(email)) {
        return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }
    return null;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function validatePhone(phone) {
    if (!phone) {
        return '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
    }
    if (!VALIDATION_PATTERNS.phone.test(phone)) {
        return '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +48123456789';
    }
    return null;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–æ–≥–∏–Ω–∞ (username –∏–ª–∏ email)
function getLoginType(login) {
    return login.includes('@') ? 'email' : 'username';
}

function toggleForms() {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    
    if (!loginForm || !registerForm) {
        return;
    }
    
    const loginVisible = loginForm.style.display !== 'none';
    
    if (loginVisible) {
        loginForm.style.display = 'none';
        registerForm.style.display = 'flex';
    } else {
        loginForm.style.display = 'flex';
        registerForm.style.display = 'none';
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º
    clearAllErrors();
    showError('');
}

function clearAllErrors() {
    const errorFields = ['login-user', 'login-pass', 'reg-user', 'reg-email', 'reg-phone', 'reg-pass', 'reg-pass-confirm'];
    errorFields.forEach(fieldId => clearFieldError(fieldId));
}

function handleLogin() {
    clearAllErrors();
    
    const login = document.getElementById('login-user').value.trim();
    const password = document.getElementById('login-pass').value;
    
    let hasErrors = false;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
    if (!login) {
        showFieldError('login-user', '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email');
        hasErrors = true;
    } else {
        const loginType = getLoginType(login);
        if (loginType === 'email') {
            const emailError = validateEmail(login);
            if (emailError) {
                showFieldError('login-user', emailError);
                hasErrors = true;
            } else {
                showFieldSuccess('login-user');
            }
        } else {
            const usernameError = validateUsername(login);
            if (usernameError) {
                showFieldError('login-user', usernameError);
                hasErrors = true;
            } else {
                showFieldSuccess('login-user');
            }
        }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (!password) {
        showFieldError('login-pass', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        hasErrors = true;
    } else {
        showFieldSuccess('login-pass');
    }
    
    if (hasErrors) {
        return;
    }
    
    if (typeof mp !== 'undefined') {
        mp.trigger('auth:login', login, password);
    } else {
        showError('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

function handleRegister() {
    clearAllErrors();
    
    const username = document.getElementById('reg-user').value.trim();
    const email = document.getElementById('reg-email').value.trim();
    const phone = document.getElementById('reg-phone').value.trim();
    const password = document.getElementById('reg-pass').value;
    const confirmPassword = document.getElementById('reg-pass-confirm').value;
    
    let hasErrors = false;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usernameError = validateUsername(username);
    if (usernameError) {
        showFieldError('reg-user', usernameError);
        hasErrors = true;
    } else {
        showFieldSuccess('reg-user');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailError = validateEmail(email);
    if (emailError) {
        showFieldError('reg-email', emailError);
        hasErrors = true;
    } else {
        showFieldSuccess('reg-email');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneError = validatePhone(phone);
    if (phoneError) {
        showFieldError('reg-phone', phoneError);
        hasErrors = true;
    } else {
        showFieldSuccess('reg-phone');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    const passwordError = validatePassword(password);
    if (passwordError) {
        showFieldError('reg-pass', passwordError);
        hasErrors = true;
    } else {
        showFieldSuccess('reg-pass');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (!confirmPassword) {
        showFieldError('reg-pass-confirm', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        hasErrors = true;
    } else if (password !== confirmPassword) {
        showFieldError('reg-pass-confirm', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        hasErrors = true;
    } else {
        showFieldSuccess('reg-pass-confirm');
    }
    
    if (hasErrors) {
        return;
    }
    
    if (typeof mp !== 'undefined') {
        mp.trigger('auth:register', username, email, phone, password);
    } else {
        showError('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

function showError(message) {
    const errorElement = document.getElementById('error-message');
    if (errorElement) {
        errorElement.textContent = message;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.togglePassword = togglePassword;
window.toggleForms = toggleForms;
window.handleLogin = handleLogin;
window.handleRegister = handleRegister;
window.showError = showError;

// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function addRealTimeValidation() {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞
    const loginUser = document.getElementById('login-user');
    if (loginUser) {
        loginUser.addEventListener('blur', function() {
            const login = this.value.trim();
            if (login) {
                const loginType = getLoginType(login);
                const error = loginType === 'email' ? validateEmail(login) : validateUsername(login);
                if (error) {
                    showFieldError('login-user', error);
                } else {
                    showFieldSuccess('login-user');
                }
            } else {
                clearFieldError('login-user');
            }
        });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const regUser = document.getElementById('reg-user');
    if (regUser) {
        regUser.addEventListener('blur', function() {
            const error = validateUsername(this.value.trim());
            if (error && this.value.trim()) {
                showFieldError('reg-user', error);
            } else if (this.value.trim()) {
                showFieldSuccess('reg-user');
            } else {
                clearFieldError('reg-user');
            }
        });
    }
    
    const regEmail = document.getElementById('reg-email');
    if (regEmail) {
        regEmail.addEventListener('blur', function() {
            const error = validateEmail(this.value.trim());
            if (error && this.value.trim()) {
                showFieldError('reg-email', error);
            } else if (this.value.trim()) {
                showFieldSuccess('reg-email');
            } else {
                clearFieldError('reg-email');
            }
        });
    }
    
    const regPhone = document.getElementById('reg-phone');
    if (regPhone) {
        regPhone.addEventListener('blur', function() {
            const error = validatePhone(this.value.trim());
            if (error && this.value.trim()) {
                showFieldError('reg-phone', error);
            } else if (this.value.trim()) {
                showFieldSuccess('reg-phone');
            } else {
                clearFieldError('reg-phone');
            }
        });
    }
    
    const regPass = document.getElementById('reg-pass');
    if (regPass) {
        regPass.addEventListener('blur', function() {
            const error = validatePassword(this.value);
            if (error && this.value) {
                showFieldError('reg-pass', error);
            } else if (this.value) {
                showFieldSuccess('reg-pass');
            } else {
                clearFieldError('reg-pass');
            }
        });
    }
    
    const regPassConfirm = document.getElementById('reg-pass-confirm');
    if (regPassConfirm) {
        regPassConfirm.addEventListener('blur', function() {
            const password = document.getElementById('reg-pass').value;
            if (this.value && password && this.value !== password) {
                showFieldError('reg-pass-confirm', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            } else if (this.value && password) {
                showFieldSuccess('reg-pass-confirm');
            } else {
                clearFieldError('reg-pass-confirm');
            }
        });
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    
    if (loginForm && registerForm) {
        loginForm.style.display = 'flex';
        registerForm.style.display = 'none';
    }
    
    const loginBtn = document.getElementById('login-btn');
    const registerBtn = document.getElementById('register-btn');
    
    if (loginBtn) {
        loginBtn.addEventListener('click', function(e) {
            e.preventDefault();
            handleLogin();
        });
    }
    
    if (registerBtn) {
        registerBtn.addEventListener('click', function(e) {
            e.preventDefault();
            handleRegister();
        });
    }
    
    const showRegisterLink = document.getElementById('show-register');
    const showLoginLink = document.getElementById('show-login');
    
    if (showRegisterLink) {
        showRegisterLink.addEventListener('click', function(e) {
            e.preventDefault();
            toggleForms();
        });
    }
    
    if (showLoginLink) {
        showLoginLink.addEventListener('click', function(e) {
            e.preventDefault();
            toggleForms();
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    addRealTimeValidation();
});

console.log('Login UI script fully loaded'); 